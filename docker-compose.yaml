services:
  web:
    build: .
    command: daphne config.asgi:application -b 0.0.0.0 -p 8000 
    volumes:
      - ./media:/app/media
      - ./output:/app/output
      - ./static:/app/static
    depends_on:
      - db
    env_file: 
      - .env_docker

  bot:
    build: .
    command: python manage.py runbot
    volumes:
      - ./media:/app/media
    depends_on:
      - db
    env_file: 
      - .env_docker

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./infra/certs/fullchain.pem:/etc/ssl/certs/fullchain.pem:ro
      # - ./infra/certs/privkey.pem:/etc/ssl/private/privkey.pem:ro
      # Если хотите раздавать статику/медиа напрямую Nginx-ом:
      - ./media:/app/media:ro
      - ./static:/app/static:ro
    restart: always
    
  db:
    image: postgres
    restart: always
    env_file:
      - .env_docker
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis

  celery:
    build: .
    command: celery -A config worker --loglevel=info 
    volumes:
      - ./media:/app/media
      - ./output:/app/output
    depends_on:
      - db
      - redis
    env_file: 
      - .env_docker
    restart: always

  celery-beat:
    build: .
    command: celery -A config beat --loglevel=info
    volumes:
      - ./output:/app/output
    depends_on:
      - db
      - redis
    env_file: 
      - .env_docker

volumes:
  db:
  media:
  output:
  static:
